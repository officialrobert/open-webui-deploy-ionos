name: Deploy WordPress Apps to IONOS Container Registry

on:
  push:
    branches: [ main, master ]
    paths:
      - 'apps/wordpress/**'
  workflow_dispatch:

env:
  REGISTRY_NAME: wordpress-apps
  REGISTRY_LOCATION: de/txl
  IMAGE_PREFIX: wordpress-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to IONOS Container Registry
      run: |
        set -e  # Exit on any error
        
        # Step 1: Get access token using secure token
        echo "Getting access token..."
        ACCESS_TOKEN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.IONOS_SECURE_TOKEN }}" \
          -d '{"grant_type": "client_credentials"}' \
          "https://api.ionos.com/auth/v1/tokens")
        
        HTTP_CODE=$(echo "$ACCESS_TOKEN_RESPONSE" | tail -n1)
        ACCESS_TOKEN_RESPONSE=$(echo "$ACCESS_TOKEN_RESPONSE" | head -n -1)
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "❌ Failed to get access token. HTTP Code: $HTTP_CODE"
          echo "Response: $ACCESS_TOKEN_RESPONSE"
          exit 1
        fi
        
        ACCESS_TOKEN=$(echo $ACCESS_TOKEN_RESPONSE | jq -r '.access_token')
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "❌ Failed to extract access token from response"
          echo "Response: $ACCESS_TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "✅ Access token obtained successfully"
        
        # Step 2: Check if registry already exists
        echo "Checking if registry '${{ env.REGISTRY_NAME }}' exists..."
        EXISTING_REGISTRY=$(curl -s -w "\n%{http_code}" -X GET \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://api.ionos.com/containerregistries/registries?name=${{ env.REGISTRY_NAME }}")
        
        HTTP_CODE=$(echo "$EXISTING_REGISTRY" | tail -n1)
        EXISTING_REGISTRY=$(echo "$EXISTING_REGISTRY" | head -n -1)
        
        if [ "$HTTP_CODE" = "200" ]; then
          REGISTRY_ID=$(echo $EXISTING_REGISTRY | jq -r '.items[0].id // empty')
          if [ -n "$REGISTRY_ID" ]; then
            echo "✅ Found existing registry with ID: $REGISTRY_ID"
            REGISTRY_HOSTNAME=$(echo $EXISTING_REGISTRY | jq -r '.items[0].properties.hostname')
          else
            echo "ℹ️ No existing registry found, will create new one"
            REGISTRY_ID=""
          fi
        else
          echo "ℹ️ Could not check existing registries, will create new one"
          REGISTRY_ID=""
        fi
        
        # Step 3: Create registry if it doesn't exist
        if [ -z "$REGISTRY_ID" ]; then
          echo "Creating new container registry..."
          REGISTRY_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "properties": {
                "name": "'${{ env.REGISTRY_NAME }}'",
                "location": "'${{ env.REGISTRY_LOCATION }}'",
                "garbageCollectionSchedule": {
                  "days": ["Sunday"],
                  "time": "02:00:00+00:00"
                },
                "features": {
                  "vulnerabilityScanning": {
                    "enabled": true
                  }
                }
              }
            }' \
            "https://api.ionos.com/containerregistries/registries")
          
          HTTP_CODE=$(echo "$REGISTRY_RESPONSE" | tail -n1)
          REGISTRY_RESPONSE=$(echo "$REGISTRY_RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" != "202" ] && [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Failed to create registry. HTTP Code: $HTTP_CODE"
            echo "Response: $REGISTRY_RESPONSE"
            exit 1
          fi
          
          REGISTRY_ID=$(echo $REGISTRY_RESPONSE | jq -r '.id')
          REGISTRY_HOSTNAME=$(echo $REGISTRY_RESPONSE | jq -r '.properties.hostname')
          echo "✅ Registry created with ID: $REGISTRY_ID"
        fi
        
        echo "Registry hostname: $REGISTRY_HOSTNAME"
        
        # Step 4: Create registry token
        echo "Creating registry token..."
        TOKEN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -d '{
            "properties": {
              "name": "github-actions-token-'$(date +%s)'",
              "expiryDate": "'$(date -d '+1 year' -u +%Y-%m-%dT%H:%M:%SZ)'",
              "scopes": [
                {
                  "name": "push",
                  "actions": ["push"]
                },
                {
                  "name": "pull",
                  "actions": ["pull"]
                }
              ]
            }
          }' \
          "https://api.ionos.com/containerregistries/registries/$REGISTRY_ID/tokens")
        
        HTTP_CODE=$(echo "$TOKEN_RESPONSE" | tail -n1)
        TOKEN_RESPONSE=$(echo "$TOKEN_RESPONSE" | head -n -1)
        
        if [ "$HTTP_CODE" != "202" ] && [ "$HTTP_CODE" != "200" ]; then
          echo "❌ Failed to create token. HTTP Code: $HTTP_CODE"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        TOKEN_ID=$(echo $TOKEN_RESPONSE | jq -r '.id')
        TOKEN_SECRET=$(echo $TOKEN_RESPONSE | jq -r '.properties.credentials.password')
        
        if [ "$TOKEN_ID" = "null" ] || [ -z "$TOKEN_ID" ]; then
          echo "❌ Failed to extract token ID from response"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "✅ Token created with ID: $TOKEN_ID"
        
        # Step 5: Login to Docker registry
        echo "Logging into Docker registry..."
        echo "$TOKEN_SECRET" | docker login $REGISTRY_HOSTNAME -u $TOKEN_ID --password-stdin
        
        if [ $? -eq 0 ]; then
          echo "✅ Successfully logged into Docker registry"
        else
          echo "❌ Failed to login to Docker registry"
          exit 1
        fi
        
        # Store values for later use
        echo "REGISTRY_HOSTNAME=$REGISTRY_HOSTNAME" >> $GITHUB_ENV
        echo "TOKEN_ID=$TOKEN_ID" >> $GITHUB_ENV

    - name: Build and push app_a
      run: |
        cd apps/wordpress
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:${{ github.sha }} \
          --build-arg APP_INSTANCE=app_a \
          --build-arg APP_PORT=3001 \
          --build-arg APP_TITLE="WordPress App A - Custom REST API" \
          --build-arg TABLE_PREFIX=wp_a_ .
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:${{ github.sha }}
        docker tag ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:${{ github.sha }} \
          ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:latest
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:latest

    - name: Build and push app_b
      run: |
        cd apps/wordpress
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:${{ github.sha }} \
          --build-arg APP_INSTANCE=app_b \
          --build-arg APP_PORT=3002 \
          --build-arg APP_TITLE="WordPress App B - Custom REST API" \
          --build-arg TABLE_PREFIX=wp_b_ .
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:${{ github.sha }}
        docker tag ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:${{ github.sha }} \
          ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:latest
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:latest

    - name: Build and push app_c
      run: |
        cd apps/wordpress
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:${{ github.sha }} \
          --build-arg APP_INSTANCE=app_c \
          --build-arg APP_PORT=3003 \
          --build-arg APP_TITLE="WordPress App C - Custom REST API" \
          --build-arg TABLE_PREFIX=wp_c_ .
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:${{ github.sha }}
        docker tag ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:${{ github.sha }} \
          ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:latest
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:latest

    - name: Output deployment info
      run: |
        echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY_HOSTNAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Images deployed:**" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-a:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-b:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_PREFIX }}-c:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Latest tags also updated**" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup (optional)
      if: always()
      run: |
        # Clean up local images to save space
        docker system prune -f
